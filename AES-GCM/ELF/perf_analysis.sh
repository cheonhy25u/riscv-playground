#!/bin/bash
# perf_analysis.sh - X86, AVX2, RISC-V, RISC-V V-Type ÏÑ±Îä• ÎπÑÍµê (100Ìöå Î∞òÎ≥µ, SPIKE ÏµúÏ†ÅÌôî Ï†ÅÏö©, 8GB Î©îÎ™®Î¶¨ Ï†úÌïú)

export LC_ALL=C  # ÏÜåÏàòÏ†ê Ìè¨Îß∑ Í≥†Ï†ï

# ‚úÖ Ïã§Ìñâ ÌöüÏàò Ï¶ùÍ∞Ä (100Ìöå)
repeat=100

# ‚úÖ Ï∫êÏãú Ï¥àÍ∏∞Ìôî (Ïã§Ìñâ ÌôòÍ≤Ω ÌÜµÏ†ú)
echo 3 | sudo tee /proc/sys/vm/drop_caches

# ‚úÖ X86ÏóêÏÑúÎèÑ 8GB Î©îÎ™®Î¶¨ Ï†úÌïú Ï†ÅÏö©
ulimit -v $((8 * 1024 * 1024))  # 8GB Ï†úÌïú

# ‚úÖ ÌÖåÏä§Ìä∏Ìï† ÌååÏùº ÌÅ¨Í∏∞ Î™©Î°ù (Îã®ÏúÑ: KB)
sizes=(1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 10240)

# ‚úÖ Ïã§Ìñâ ÌååÏùº Î™©Î°ù (SPIKE ÏµúÏ†ÅÌôî ÏòµÏÖò + X86ÏóêÎèÑ ÎèôÏùºÌïú ÌôòÍ≤Ω ÏÑ§Ï†ï)
executables=(
  "ulimit -v $((8 * 1024 * 1024)); taskset -c 0-3 ./aes_gcm_x86"
  "ulimit -v $((8 * 1024 * 1024)); taskset -c 0-3 ./aes_gcm_avx2"
  "taskset -c 0-3 spike --isa=rv64gcv_zve32x_vlen=256 -m8192 --disable-dtb --rbb-port=0 --log-commits=0 ./aes_gcm_riscv"
  "taskset -c 0-3 spike --isa=rv64gcv_zve32x_vlen=256 -m8192 --disable-dtb --rbb-port=0 --log-commits=0 ./aes_gcm_riscv_v"
)

# ‚úÖ Í≤∞Í≥º CSV ÌååÏùº ÏÉùÏÑ± (ÌëúÏ§Ä Ìé∏Ï∞® Ï∂îÍ∞Ä)
output_csv="perf_results.csv"
echo "FileSizeKB,ExecName,TaskClock,TaskClock_StdDev,Cycles,Cycles_StdDev,PageFaults,PageFaults_StdDev,CpuClock,CpuClock_StdDev" > "${output_csv}"

for size in "${sizes[@]}"; do
  file="datafile/test_${size}KB.txt"
  if [ ! -f "$file" ]; then
    echo "‚ö†Ô∏è File $file does not exist. Skipping."
    continue
  fi
  echo "üîπ Testing file $file (${size} KB = $((size/1024)) MB)..."

  for exe in "${executables[@]}"; do
    task_times=()
    cycles_times=()
    pf_times=()
    cpu_times=()

    echo "  ‚û§ Running $exe ($repeat runs)..."

    for ((i=1; i<=repeat; i++)); do
      # ‚úÖ perf stat Ïã§ÌñâÌïòÏó¨ ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
      output=$( { /usr/bin/time -p perf stat -e task-clock,cycles,page-faults,cpu-clock -r 1 bash -c "${exe} < ${file}" > /dev/null; } 2>&1 )

      # Ïù¥Î≤§Ìä∏Î≥Ñ Í∞í Ï∂îÏ∂ú (Îπà Í∞íÏù¥Î©¥ 0ÏúºÎ°ú ÏÑ§Ï†ï)
      task=$(echo "$output" | grep "task-clock" | awk '{print $1}' | tr -d ',')
      cycles=$(echo "$output" | grep "cycles" | head -n 1 | awk '{print $1}' | tr -d ',')
      pf=$(echo "$output" | grep "page-faults" | awk '{print $1}' | tr -d ',')
      cpu=$(echo "$output" | grep "cpu-clock" | awk '{print $1}' | tr -d ',')

      task=${task:-0}
      cycles=${cycles:-0}
      pf=${pf:-0}
      cpu=${cpu:-0}

      # ‚úÖ Ïà´ÏûêÏù∏ÏßÄ ÌôïÏù∏ ÌõÑ Ï†ÄÏû• (bc Ïò§Î•ò Î∞©ÏßÄ)
      [[ "$task" =~ ^[0-9]+([.][0-9]+)?$ ]] && task_times+=("$task")
      [[ "$cycles" =~ ^[0-9]+([.][0-9]+)?$ ]] && cycles_times+=("$cycles")
      [[ "$pf" =~ ^[0-9]+([.][0-9]+)?$ ]] && pf_times+=("$pf")
      [[ "$cpu" =~ ^[0-9]+([.][0-9]+)?$ ]] && cpu_times+=("$cpu")
    done

    # ‚úÖ ÌèâÍ∑†Í∞í Î∞è ÌëúÏ§Ä Ìé∏Ï∞® Í≥ÑÏÇ∞ Ìï®Ïàò
    mean_stddev() {
      local -n arr=$1  # Ï∞∏Ï°∞ Î≥ÄÏàò ÏÇ¨Ïö© (Bash 4 Ïù¥ÏÉÅ ÏßÄÏõê)
      local sum=0
      local sum_sq=0
      local count=${#arr[@]}

      if [ "$count" -eq 0 ]; then
        echo "0,0"  # Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Í≤ΩÏö∞ Í∏∞Î≥∏Í∞í Î∞òÌôò
        return
      fi

      for value in "${arr[@]}"; do
        sum=$(echo "$sum + $value" | bc)
        sum_sq=$(echo "$sum_sq + ($value * $value)" | bc)
      done

      mean=$(echo "scale=4; $sum / $count" | bc)
      variance=$(echo "scale=4; ($sum_sq / $count) - ($mean * $mean)" | bc)
      stddev=$(echo "scale=4; sqrt($variance)" | bc 2>/dev/null || echo "0")

      echo "$mean,$stddev"
    }

    # ‚úÖ ÌèâÍ∑† Î∞è ÌëúÏ§Ä Ìé∏Ï∞® Í≥ÑÏÇ∞
    task_mean_stddev=$(mean_stddev task_times)
    cycles_mean_stddev=$(mean_stddev cycles_times)
    pf_mean_stddev=$(mean_stddev pf_times)
    cpu_mean_stddev=$(mean_stddev cpu_times)

    # ‚úÖ CSVÏóê Í∏∞Î°ù
    echo "${size},${exe},${task_mean_stddev},${cycles_mean_stddev},${pf_mean_stddev},${cpu_mean_stddev}" >> "${output_csv}"
  done
done

echo "‚úÖ Performance measurements saved in ${output_csv}"
